// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using ML_and_EuclideanML.Model;
using Machine_LearningML.Model;
using System.IO;

namespace ML_and_EuclideanML.ConsoleApp
{
    class Program
    {
        public static List<int> classes = new List<int>();//klasifikuojamu duomenu zinomos klases palyginimui
        public static List<Result> results = new List<Result>();// klasifikavimo rezultatai

        static void Main(string[] args)
        {
            //inicijuojami tiksluma skaiciuojantys metodai
            CalculationStrong(GetFilePath(null),0,                  "data.txt");
            CalculationWeak(GetFilePath(null),0,                    "data.txt");
            CalculationStrong(GetFilePath(2,"data.txt"),2,          "data.txt");
            CalculationWeak(GetFilePath(2, "data.txt"),2,           "data.txt");
            CalculationStrong(GetFilePath(0, "newData.txt"), 0,     "newData.txt");
            CalculationWeak(GetFilePath(0, "newData.txt"), 0,       "newData.txt");
            CalculationStrong(GetFilePath(3, "data_half.txt"), 3,   "data_half.txt");
            CalculationWeak(GetFilePath(3, "data_half.txt"), 3,     "data_half.txt");



            PrintResults();
        }

        /////////////////////// Pataikymo isvedimo metodai ///////////////////////
        //metodas, grazinantis ML ir Euklido pataikymo tiksluma, lyginimui naudojami pilni duomenys
        public static void CalculationStrong(string path,int deletedCol,string original)
        {
            int mlAcc = PredictStrongModel(path);
            int euAcc = Euclidean.Calculate(GetFilePath(null),path);//cia turi buti euklido pataikyti naudojant pilnus duomenis lyginimui
            bool ifSameData = false;
            if (GetFilePath(null)== GetFilePath(original))
                ifSameData = true;
            results.Add(new Result {
                fullModel=true,
                sameData= ifSameData,
                deletedColumns=deletedCol,
                mlResult=$"{mlAcc}/{classes.Count} ({100/classes.Count*mlAcc}%)",
                euclideanResult= $"{euAcc}/{classes.Count} ({100 / classes.Count * euAcc}%)"
            });
        }
        //metodas, grazinantis ML ir Euklido pataikymo tiksluma, lyginimui naudojama puse duomenu
        public static void CalculationWeak(string path,int deletedCol, string original)
        {
            int mlAcc = PredictWeakModel(path);
            int euAcc = Euclidean.Calculate(GetFilePath("data_half.txt"), path);//cia turi buti euklido pataikyti naudojant puse duomenu lyginimui
            bool ifSameData = false;
            if (GetFilePath("data_half.txt") == GetFilePath(original) )
                ifSameData = true;



            results.Add(new Result
            {
                fullModel = false,
                sameData = ifSameData,
                deletedColumns = deletedCol,
                mlResult = $"{mlAcc}/{classes.Count} ({100 / classes.Count * mlAcc}%)",
                euclideanResult = $"{euAcc}/{classes.Count} ({100 / classes.Count * euAcc}%)"
            });
        }

        /////////////////////// Machine Learning metodai ///////////////////////
        //<Pilnai apmokytas modelis> grazina kiek pataikyta
        public static int PredictStrongModel(string path)
        {
            List<ML_and_EuclideanML.Model.ModelInput> data = GetData(path);
            List<int> predictedClasses = PredictML(data);
            int valid = 0;
            for (int i = 0; i < classes.Count; i++)
                if (classes[i] == predictedClasses[i])
                    valid++;
            //Console.WriteLine($"MachineLearning: modelis apmokytas: {strongFile} , klasifikuojami duomenys: {usingData}, tikslumas: {valid} is {predictedClasses.Count}");
            return valid;

        }
        //<Pusiau apmokytas modelis> grazina kiek pataikyta
        public static int PredictWeakModel(string path)
        {
            List<Machine_LearningML.Model.ModelInput> data = GetDataWeak(path);
            List<int> predictedClasses = PredictMLWeak(data);
            int valid = 0;
            for (int i = 0; i < classes.Count; i++)
                if (classes[i] == predictedClasses[i])
                    valid++;
            //Console.WriteLine($"MachineLearning: modelis apmokytas: {weakFile} , klasifikuojami duomenys: {usingData}, tikslumas: {valid} is {predictedClasses.Count}");
            return valid;
        }
        // Metodas, kuris nuskaito duomenis <Pilnai apmokytam modeliui>
        public static List<ML_and_EuclideanML.Model.ModelInput> GetData(string path)
        {
            classes.Clear();
            List<ML_and_EuclideanML.Model.ModelInput> data = new List<ML_and_EuclideanML.Model.ModelInput>();
            string line;
            bool x = false;
            System.IO.StreamReader file = new System.IO.StreamReader(path);
            while ((line = file.ReadLine()) != null)
            {
                if (x)
                {
                    string[] arr = line.Split(',');
                    ML_and_EuclideanML.Model.ModelInput sampleData = new ML_and_EuclideanML.Model.ModelInput()
                    {
                        Price = Convert.ToSingle(arr[0]),
                        CPU = Convert.ToSingle(arr[2]),
                        Cores = Convert.ToSingle(arr[3]),
                        RAM = Convert.ToSingle(arr[4]),
                        SSDorHDD = Convert.ToSingle(arr[5]),
                        StorageCapacity = Convert.ToSingle(arr[6]),
                        VRAM = Convert.ToSingle(arr[7]),
                        Diagonal = Convert.ToSingle(arr[8]),
                        Weight = Convert.ToSingle(arr[9]),
                        BatteryCapacity = Convert.ToSingle(arr[10]),
                        RefreshRate = Convert.ToSingle(arr[11]),
                    };
                    data.Add(sampleData);
                    classes.Add(Convert.ToInt32(arr[12]));
                }
                x = true;
            }
            file.Close();
            return data;
        }
        // Metodas, kuris grazina nusiustu duomenu klases <Pilnai apmokytam modeliui>
        public static List<int> PredictML(List<ML_and_EuclideanML.Model.ModelInput> data)
        {
            List<int> acc = new List<int>();
            foreach (var a in data)
            {
                var predictionResult = ML_and_EuclideanML.Model.ConsumeModel.Predict(a);
                int cat = Convert.ToInt32(predictionResult.Prediction);
                acc.Add(cat);
            }
            return acc;
        }
        // Metodas, kuris nuskaito duomenis <Pusiau apmokytam modeliui>
        public static List<Machine_LearningML.Model.ModelInput> GetDataWeak(string path)
        {
            classes.Clear();
            List<Machine_LearningML.Model.ModelInput> data = new List<Machine_LearningML.Model.ModelInput>();
            string line;
            bool x = false;
            System.IO.StreamReader file = new System.IO.StreamReader(path);
            while ((line = file.ReadLine()) != null)
            {
                if (x)
                {
                    string[] arr = line.Split(',');
                    Machine_LearningML.Model.ModelInput sampleData = new Machine_LearningML.Model.ModelInput()
                    {
                        Price = Convert.ToSingle(arr[0]),
                        CPU = Convert.ToSingle(arr[2]),
                        Cores = Convert.ToSingle(arr[3]),
                        RAM = Convert.ToSingle(arr[4]),
                        SSDorHDD = Convert.ToSingle(arr[5]),
                        StorageCapacity = Convert.ToSingle(arr[6]),
                        VRAM = Convert.ToSingle(arr[7]),
                        Diagonal = Convert.ToSingle(arr[8]),
                        Weight = Convert.ToSingle(arr[9]),
                        BatteryCapacity = Convert.ToSingle(arr[10]),
                        RefreshRate = Convert.ToSingle(arr[11]),
                    };
                    data.Add(sampleData);
                    classes.Add(Convert.ToInt32(arr[12]));
                }
                x = true;
            }
            file.Close();
            return data;
        }
        // Metodas, kuris grazina nusiustu duomenu klases <Pusiau apmokytam modeliui>
        public static List<int> PredictMLWeak(List<Machine_LearningML.Model.ModelInput> data)
        {
            List<int> acc = new List<int>();
            foreach (var a in data)
            {
                var predictionResult = Machine_LearningML.Model.ConsumeModel.Predict(a);
                int cat = Convert.ToInt32(predictionResult.Prediction);
                acc.Add(cat);
            }
            return acc;
        }

        /////////////////////// pagalbiniai metodai ///////////////////////
        //grazina failo pavadinima
        public static string SetFile(string path)
        {
            string[] splited = path.Split(@"\");
            return splited[splited.Length - 1];
        }
        //grazina path failo, kuris lyginamas/naudojamas apmokymui (null) arba pasirinkto failo
        public static string GetFilePath(string fileName)
        {
            if(fileName==null)
                return Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, @"..\..\..\..\data.txt"));
            else
                return Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, @"..\..\..\..\"+fileName));
        }
        //grazina path i faila, kuriame nurodytas stulpeliu skaicius, nurodomas ir pradinio failo (is kurio bus salinami stulpeliai) pavadinimas
        public static string GetFilePath(int numberOfColumns,string fileToCopyPath)
        {
            string line;
            List<string> lines = new List<string>();
            System.IO.StreamReader file = new System.IO.StreamReader(GetFilePath(fileToCopyPath));
            while ((line = file.ReadLine()) != null)//nuskaito eilutes
            {
                lines.Add(line);
            }
            file.Close();

            List<string> newFile = new List<string>();
            newFile.Add(lines[0]);//i nauja faila pridedamas headeris
            for(int i=1;i<lines.Count;i++)//eilutes skaido
            {
                string[] splited = lines[i].Split(',');//suskaidyta eilute i atributus
                for(int j=0;j<splited.Length;j++)//cikluoja per atributus
                {
                    if(j!=1 && j!= splited.Length-1)//neiskaiciuojamas pavadinimo ir klases stulpeliai (jie nelieciami)
                    {
                        if(j<=numberOfColumns)//nulinami stulpeliai (is eiles neskaitant nelieciamu)
                        {
                            splited[j] = "0";
                        }
                    }
                }
                string newLine=null;
                foreach(var a in splited)
                {
                    newLine = newLine + ',' + a;
                }
                newLine=newLine.Substring(1);
                newFile.Add(newLine);

            }
            System.IO.File.WriteAllLines(Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, @"..\..\..\..\temp.txt")),newFile);
            return Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, @"..\..\..\..\temp.txt"));
        }
        //spausdina rezultatus
        public static void PrintResults()
        {
            //Console.WriteLine(String.Format("{0,-10} | {1,-10} | {2,5} | {3,5} | {3,5}", "Learning full data", "Same data to clasify", "Deleted columns", "ML accuracy", "Euclidean accuracy"));
            Console.WriteLine(String.Format("{0,-18} | {1,-20} | {2,-15} | {3,-11} | {4,-18}", "Learning full data", "Learning data to clasify", "Deleted columns", "ML accuracy", "Euclidean accuracy"));

            foreach (var a in results)
                Console.WriteLine(String.Format("{0,-18} | {1,-24} | {2,-15} | {3,-11} | {4,-18}", a.fullModel, a.sameData, a.deletedColumns, a.mlResult, a.euclideanResult));
        }
    }
}
